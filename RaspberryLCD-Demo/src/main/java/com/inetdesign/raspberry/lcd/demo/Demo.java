package com.inetdesign.raspberry.lcd.demo;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.inetdesign.raspberry.lcd.ButtonPressed;
import com.inetdesign.raspberry.lcd.RaspiLCD;
import com.inetdesign.raspberry.lcd.util.DisplayUtils;

public class Demo {

	private static final String longText = "Java2LCD system library to access the RaspiLCD from a Java programm.";

	private static boolean running = true;

	private static Integer fontSize = 0;
	static Map<Integer, Integer> lines;

	static Logger logger = LoggerFactory.getLogger(Demo.class);

	public static void main(String[] args) throws InterruptedException {

		final RaspiLCD lcd = RaspiLCD.getInstance();
		final DisplayUtils line1 = new DisplayUtils(longText, fontSize);

		@SuppressWarnings("unused")
		ButtonPressed pressThread = new ButtonPressed() {

			@Override
			public void upButtonPressed() {
				lcd.increaseContrast();
			}

			@Override
			public void downButtonPressed() {
				lcd.decreaseContrast();
			}

			@Override
			public void centerButtonPressed() {
				lcd.toggleBacklicht();

			}

			@Override
			public void leftButtonPressed() {
				if (fontSize < 3) {
					fontSize++;
				} else {
					fontSize = 0;
				}
				line1.setNewFontSize(fontSize);
				lines = DisplayUtils.getLineCoords(fontSize);
			}

			@Override
			public void rightButtonPressed() {
				running = false;
				lcd.clearScreen();
				lcd.setBacklight(false);
				System.exit(0);
			}

		};

		lines = DisplayUtils.getLineCoords(fontSize);

		runningTextWithSwitchingFontSize(lcd, line1);
	}

	private static void runningTextWithSwitchingFontSize(final RaspiLCD lcd, final DisplayUtils line1)
			throws InterruptedException {
		while (running) {
			String t = line1.cutLongString();
			Thread.sleep(200);
			lcd.clearScreen();
			lcd.setFont(fontSize);

			for (Map.Entry<Integer, Integer> line : lines.entrySet()) {
				lcd.printXY(0, line.getValue(), t);
			}

			lcd.writeFramebuffer();
		}
	}

	private static void setImage(final RaspiLCD lcd) {
		int[] imageData = new int[] { 57, 64, 0x00, 0x00, 0x60, 0xFC, 0xFC, 0xAC, 0x0E, 0x0E, 0x06, 0x06, 0x07, 0x07,
				0x07, 0x87, 0x87, 0x87, 0x03, 0x07, 0x07, 0x07, 0x0E, 0x06, 0x0E, 0x0C, 0x1C, 0x38, 0xF0, 0xE0, 0x80,
				0xC0, 0xF0, 0x78, 0x1C, 0x0C, 0x0C, 0x0E, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x87, 0x83, 0x07, 0x07,
				0x07, 0x07, 0x06, 0x06, 0x0E, 0x8C, 0xFC, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F,
				0x7C, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x06, 0x0C, 0x1C, 0x98,
				0xF0, 0xF0, 0xF0, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xB8, 0x18, 0x0C, 0x04, 0x06, 0x02,
				0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xF0, 0x78, 0x3E, 0x1F, 0x0F, 0x01, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xE0, 0xF1, 0x71, 0x3B, 0x1F, 0x1F, 0x0E, 0x0E, 0x0C, 0x8C,
				0xCE, 0xEE, 0xFE, 0xFE, 0x9F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0F,
				0x0F, 0x9F, 0xFF, 0xFE, 0xCE, 0x8E, 0x8C, 0x0C, 0x0E, 0x1E, 0x1E, 0x3F, 0x7B, 0xF3, 0xE1, 0xC0, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xFE, 0x7F, 0x7F, 0xF1, 0xF0, 0xF8,
				0xF8, 0x7C, 0x3E, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0E, 0x1E, 0x7E, 0xFE,
				0xFE, 0xFE, 0xFE, 0x1E, 0x0E, 0x06, 0x07, 0x07, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0F, 0x1E, 0x3C, 0x7C,
				0xF8, 0xF0, 0xF0, 0xFF, 0x7F, 0x7F, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x03, 0x01,
				0x00, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFB, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x80, 0xC0, 0xE0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xFB, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF,
				0xFC, 0x01, 0x07, 0x0F, 0x7E, 0xFC, 0xF8, 0xFE, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x3F, 0x7F,
				0xFE, 0xFE, 0xFE, 0xFE, 0xFF, 0x0F, 0x07, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
				0x01, 0x03, 0x07, 0x1F, 0xFF, 0xFF, 0xFE, 0x7E, 0x3F, 0x1F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x0F,
				0xFC, 0xFC, 0xFE, 0x3F, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0x7C, 0x70, 0xE0,
				0xC0, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x81, 0xCF, 0xFF, 0xFF, 0xFE, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0,
				0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF8, 0xFC, 0xFF, 0xFF, 0xC7, 0x81, 0x80, 0x80, 0x80, 0x80,
				0x80, 0xC0, 0xC0, 0xE0, 0xF0, 0x7C, 0x3F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F,
				0x7B, 0x71, 0xE1, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0x71, 0x79, 0x3F, 0x1F,
				0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00 };

		while (running) {
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			lcd.clearScreen();

			lcd.drawBitmap(0, 0, imageData);

			lcd.writeFramebuffer();
		}
	}

}
